; OM File Header - Saved 2021/03/18 12:06:51
; (6.18 :patc (om-make-point 982 10) (om-make-point -8 -8) (om-make-point 1366 700) "" 183 0 nil "2021/03/18 12:03:59")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "WILSON - mos-check" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1044 303) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "SOBREPOSITION" 11) (om-load-inputfun (quote input-funbox) "High note" "RANGE" 2))) (om-make-point 843 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-CHECK 2" (quote mos-check) (quote ((om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "sobreposition" "SOBREPOSITION" 60) (om-load-inputfun (quote input-funbox) "range of check" "RANGE" 2))) (om-make-point 364 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 262 136) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 100 75) (quote "Maior número de sobreposição.") "" (om-make-point 357 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 78 47) (quote "Intervalo gerador") "" (om-make-point 260 83) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 238 68) (quote "range of the MOS.") "" (om-make-point 515 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 522 122) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 372 105) (om-make-point 32 28) 23 "23" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 338 88) (quote "O objeto vai checar todas as sobreposição de 1 até 23 para ver quais são MOS seguindo o intervalo gerador 4/3 com a nota mais grave 6000 e nota mais aguda 7200.") "" (om-make-point 720 134) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 259 270) (om-make-point 238 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 210 24) "(1 2 4 6 11 16)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 171 79) (quote "Configurações com 1, 2, 4, 6, 11 ou 16 sobreposições serão MOS.") "" (om-make-point 503 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 765 268) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 914 269) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-VERIFY" (quote mos-verify) (quote ((om-load-inputfun (quote input-funbox) "list of notes - object-MOS" "NOTELIST" (list 6754 6308 7062 6616 6178)))) (om-make-point 828 385) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 740 469) (om-make-point 218 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 190 24) "(L L L s L L s L L L s L L s L L s)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 1 0 nil 0) (13 0 1 1 nil 0) (0 0 1 2 nil 0) (3 0 2 0 nil 0) (8 0 2 1 nil 0) (7 0 2 2 nil 0) (1 0 14 0 nil 0) (14 0 15 0 nil 0))) nil 6.18))
