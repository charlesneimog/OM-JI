; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 442 60) (om-make-point -8 -8) (om-make-point 1366 675) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "WILSON - cps-ratio" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 454 330) (om-make-point 279 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 251 16) "((5 7) (5 13) (7 13) (5 17) (7 17) (13 17))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 198 70) (quote "Este objeto faz a decomposição de números primos, ele será muito usado na decomposição de sieves.") "" (om-make-point 637 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-DECOMPOSITION" (quote prime-decomposition) (quote ((om-load-inputfun (quote input-funbox) "Number or numbers list." "HARMONIC" (list 9 18 172)))) (om-make-point 516 172) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 489 122) (om-make-point 173 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 145 17) "(35 65 91 85 119 221)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 190 61) (quote "Transforma os vértices de qualquer CPS em identities segundo a teoria de Partch.") "" (om-make-point 601 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->IDENTITY" (quote cps->identity) (quote ((om-load-inputfun (quote input-funbox) "Combination products set of a Hexany, Eikosany or others." "CPS" 1))) (om-make-point 524 42) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 61) (quote "Transforma os vértices de qualquer CPS em razões.") "" (om-make-point 98 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 158 144) (om-make-point 286 44) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 258 20) "(35/32 65/64 91/64 85/64 119/64 221/128)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->RATIO" (quote cps->ratio) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HEXANY" 1))) (om-make-point 273 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 368 30) (om-make-point 77 28) (list 5 7 13 17) "(5 7 13 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 382 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (10 0 5 0 nil 0) (8 0 7 0 nil 0) (10 0 8 0 nil 0) (9 0 10 0 nil 0))) nil 6.18))
