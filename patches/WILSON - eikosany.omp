; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 442 10) (om-make-point -8 -8) (om-make-point 1366 680) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "WILSON - eikosany" (quote ((let ((box (om-load-boxcall (quote genfun) "EIKOSANY-CONNECTIONS" (quote eikosany-connections) (quote ((om-load-inputfun (quote input-funbox) "list of tree harmonics" "VERTICE" (list 1 3 9)) (om-load-inputfun (quote input-funbox) "list of the cps-eikosany" "EIKOSANY" (list (list 1 3 5) (list 1 3 7) (list 1 5 7) (list 3 5 7) (list 1 3 9) (list 1 5 9) (list 3 5 9) (list 1 7 9) (list 3 7 9) (list 5 7 9) (list 1 3 11) (list 1 5 11) (list 3 5 11) (list 1 7 11) (list 3 7 11) (list 5 7 11) (list 1 9 11) (list 3 9 11) (list 5 9 11) (list 7 9 11))))) (om-make-point 676 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Resultado") "" (om-make-point 1111 250) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 437 64) (quote "((1 3 5) (1 3 7) (1 5 7) (3 5 7) (1 5 9) (1 7 9) (5 7 9) (1 5 11) (1 7 11) (5 7 11))") "" (om-make-point 657 250) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY" (quote eikosany) (quote ((om-load-inputfun (quote input-funbox) "six harmonic notes | if you don't put 6 notes the result will not be an eikosany." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 777 63) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 554 73) (quote "Os vértices ((1 3 5) (1 3 7) (1 5 7) (3 5 7) (1 5 9) (1 7 9) (5 7 9) (1 5 11) (1 7 11) (5 7 11)) estão conectados ao vértice (1 5 7). Aqui fica claro que as repretações de Narushima são simplificações. ") "" (om-make-point 671 322) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 65) (quote "O objeto mostra quais vértices estão conectados ao vértice selecionado no inlet 1.") "" (om-make-point 806 165) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 673 114) (om-make-point 55 28) (list 1 5 7) "(1 5 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 62) (quote "O objeto constrói todas as razões de um CPS-Eikosany.") "" (om-make-point 852 81) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 759 26) (om-make-point 91 28) (list 1 3 5 7 9 11) "(1 3 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 187 61) (quote "Cada lista de 3 números é um vértice do Eikosany.") "" (om-make-point 474 188) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 221 62) (quote "Resultado do Eikosany de (1 3 5 7 9 11) em razões.") "" (om-make-point 400 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 342 88) (quote "(15/8 21/16 35/32 105/64 27/16 45/32 135/128 63/32 189/128 315/256 33/32 55/32 165/128 77/64 231/128 385/256 99/64 297/256 495/256 693/512)") "" (om-make-point 62 342) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 330 82) (quote "((1 3 5) (1 3 7) (1 5 7) (3 5 7) (1 3 9) (1 5 9) (3 5 9) (1 7 9) (3 7 9) (5 7 9) (1 3 11) (1 5 11) (3 5 11) (1 7 11) (3 7 11) (5 7 11) (1 9 11) (3 9 11) (5 9 11) (7 9 11))$") "" (om-make-point 146 186) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 63 81) (om-make-point 91 28) (list 1 3 5 7 9 11) "(1 3 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY" (quote eikosany) (quote ((om-load-inputfun (quote input-funbox) "six harmonic notes | if you don't put 6 notes the result will not be an eikosany." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 84 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 221 62) (quote "O objeto transforma a combinação de harmônicos em razões.") "" (om-make-point 147 278) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->RATIO" (quote cps->ratio) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HEXANY" 1))) (om-make-point 83 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 62) (quote "O objeto constrói todas as razões de um CPS-Eikosany.") "" (om-make-point 144 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "eikosany triads" (om-load-patch-abs1 "eikosany triads" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 385 61) (quote "São 60 tríades subharmônicas e 60 tríades harmônicas para o Eikosany.") "" (om-make-point 659 405) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 470 260) (quote "((99/64 297/256 495/256) (77/64 231/128 385/256) (63/32 189/128 315/256) (99/64 297/256 693/512) (55/32 165/128 385/256) (45/32 135/128 315/256) (99/64 495/256 693/512) (33/32 165/128 231/128) (27/16 135/128 189/128) (297/256 495/256 693/512) (33/32 55/32 77/64) (27/16 45/32 63/32) (77/64 231/128 693/512) (55/32 165/128 495/256) (35/32 105/64 315/256) (77/64 385/256 693/512) (33/32 165/128 297/256) (21/16 105/64 189/128) (231/128 385/256 693/512) (33/32 55/32 99/64) (21/16 35/32 63/32) (55/32 385/256 495/256) (33/32 231/128 297/256) (15/8 105/64 135/128) (165/128 385/256 495/256) (33/32 77/64 99/64) (15/8 35/32 45/32) (165/128 231/128 297/256) (55/32 77/64 99/64) (15/8 21/16 27/16) (63/32 189/128 693/512) (45/32 135/128 495/256) (35/32 105/64 385/256) (63/32 315/256 693/512) (27/16 135/128 297/256) (21/16 105/64 231/128) (189/128 315/256 693/512) (27/16 45/32 99/64) (21/16 35/32 77/64) (45/32 315/256 495/256) (27/16 189/128 297/256) (15/8 105/64 165/128) (135/128 315/256 495/256) (27/16 63/32 99/64) (15/8 35/32 55/32) (135/128 189/128 297/256) (45/32 63/32 99/64) (15/8 21/16 33/32) (35/32 315/256 385/256) (21/16 189/128 231/128) (15/8 135/128 165/128) (105/64 315/256 385/256) (21/16 63/32 77/64) (15/8 45/32 55/32) (105/64 189/128 231/128) (35/32 63/32 77/64) (15/8 27/16 33/32) (105/64 135/128 165/128) (35/32 45/32 55/32) (21/16 27/16 33/32))") "" (om-make-point 666 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 439 221) (quote "((33/32 55/32 165/128) (27/16 45/32 135/128) (21/16 35/32 105/64) (33/32 77/64 231/128) (27/16 63/32 189/128) (15/8 35/32 105/64) (55/32 77/64 385/256) (45/32 63/32 315/256) (15/8 21/16 105/64) (165/128 231/128 385/256) (135/128 189/128 315/256) (15/8 21/16 35/32) (33/32 99/64 297/256) (21/16 63/32 189/128) (15/8 45/32 135/128) (55/32 99/64 495/256) (35/32 63/32 315/256) (15/8 27/16 135/128) (165/128 297/256 495/256) (105/64 189/128 315/256) (15/8 27/16 45/32) (77/64 99/64 693/512) (35/32 45/32 315/256) (21/16 27/16 189/128) (231/128 297/256 693/512) (105/64 135/128 315/256) (21/16 27/16 63/32) (385/256 495/256 693/512) (105/64 135/128 189/128) (35/32 45/32 63/32) (27/16 99/64 297/256) (21/16 77/64 231/128) (15/8 55/32 165/128) (45/32 99/64 495/256) (35/32 77/64 385/256) (15/8 33/32 165/128) (135/128 297/256 495/256) (105/64 231/128 385/256) (15/8 33/32 55/32) (63/32 99/64 693/512) (35/32 55/32 385/256) (21/16 33/32 231/128) (189/128 297/256 693/512) (105/64 165/128 385/256) (21/16 33/32 77/64) (315/256 495/256 693/512) (105/64 165/128 231/128) (35/32 55/32 77/64) (63/32 77/64 693/512) (45/32 55/32 495/256) (27/16 33/32 297/256) (189/128 231/128 693/512) (135/128 165/128 495/256) (27/16 33/32 99/64) (315/256 385/256 693/512) (135/128 165/128 297/256) (45/32 55/32 99/64) (315/256 385/256 495/256) (189/128 231/128 297/256) (63/32 77/64 99/64))$") "" (om-make-point 206 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY-TRIADS" (quote eikosany-triads) (quote ((om-load-inputfun (quote input-funbox) "three harmonic notes | if you don't put 3 notes the result will not be an eikosany triads." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 10 104) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 8 56) (om-make-point 91 28) (list 1 3 5 7 9 11) "(1 3 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 179 48) (quote "Tríades sub-harmônicas.") "" (om-make-point 354 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 12 395) (om-make-point 307 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6553 7438 6940) (7406 7090 6592) (6971 6655 7357) (6553 6820 7522) (7406 7673 7175) (7588 6655 7357) (7438 6820 7206) (7090 7673 6859) (7588 6971 7357) (6940 7522 7206) (6592 7175 6859) (7588 6971 6655) (6553 7255 6757) (6971 7673 7175) (7588 7090 6592) (7438 7255 7642) (6655 7673 6859) (7588 7406 6592) (6940 6757 7642) (7357 7175 6859) (7588 7406 7090) (6820 7255 7024) (6655 7090 6859) (6971 7406 7175) (7522 6757 7024) (7357 6592 6859) (6971 7406 7673) (7206 7642 7024) (7357 6592 7175) (6655 7090 7673) (7406 7255 6757) (6971 6820 7522) (7588 7438 6940) (7090 7255 7642) (6655 6820 7206) (7588 6553 6940) (6592 6757 7642) (7357 7522 7206) (7588 6553 7438) (7673 7255 7024) (6655 7438 7206) (6971 6553 7522) (7175 6757 7024) (7357 6940 7206) (6971 6553 6820) (6859 7642 7024) (7357 6940 7522) (6655 7438 6820) (7673 6820 7024) (7090 7438 7642) (7406 6553 6757) (7175 7522 7024) (6592 6940 7642) (7406 6553 7255) (6859 7206 7024) (6592 6940 6757) (7090 7438 7255) (6859 7206 7642) (7175 7522 6757) (7673 6820 7255))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000)) :ldur (quotelvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 757 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 22 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 173 61) (quote "Converte razões para midicents.") "" (om-make-point 74 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 322 395) (om-make-point 307 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7255 6757 7642) (6820 7522 7206) (7673 7175 6859) (7255 6757 7024) (7438 6940 7206) (7090 6592 6859) (7255 7642 7024) (6553 6940 7522) (7406 6592 7175) (6757 7642 7024) (6553 7438 6820) (7406 7090 7673) (6820 7522 7024) (7438 6940 7642) (6655 7357 6859) (6820 7206 7024) (6553 6940 6757) (6971 7357 7175) (7522 7206 7024) (6553 7438 7255) (6971 6655 7673) (7438 7206 7642) (6553 7522 6757) (7588 7357 6592) (6940 7206 7642) (6553 6820 7255) (7588 6655 7090) (6940 7522 6757) (7438 6820 7255) (7588 6971 7406) (7673 7175 7024) (7090 6592 7642) (6655 7357 7206) (7673 6859 7024) (7406 6592 6757) (6971 7357 7522) (7175 6859 7024) (7406 7090 7255) (6971 6655 6820) (7090 6859 7642) (7406 7175 6757) (7588 7357 6940) (6592 6859 7642) (7406 7673 7255) (7588 6655 7438) (6592 7175 6757) (7090 7673 7255) (7588 6971 6553) (6655 6859 7206) (6971 7175 7522) (7588 6592 6940) (7357 6859 7206) (6971 7673 6820) (7588 7090 7438) (7357 7175 7522) (6655 7673 6820) (7588 7406 6553) (7357 6592 6940) (6655 7090 7438) (6971 7406 6553))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000)) :ldur (quotelvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9) (9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 757 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6500))) (om-make-point 301 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 48) (quote "Tríades Harmônicas.") "" (om-make-point 810 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 47 271) (om-make-point 44 28) 6500 "6500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (7 0 6 1 nil 2) (3 0 7 0 nil 2) (12 0 7 1 nil 0) (10 0 9 1 nil 1) (3 1 10 0 ((om-make-point 64 176) (om-make-point 102 276) (om-make-point 303 275) (om-make-point 315 278)) 1))) 6.18 nil "" (om-make-point 200 200) (om-make-point 1011 631)) (quote nil) (om-make-point 402 534) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "eikosany tetrades" (om-load-patch-abs1 "eikosany tetrades" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 315 161) (om-make-point 44 28) 6500 "6500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY-TETRADS" (quote eikosany-tetrads) (quote ((om-load-inputfun (quote input-funbox) "three harmonic notes | if you don't put 3 notes the result will not be an eikosany triads." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 26 83) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 385 61) (quote "São 15 tétrades subharmônicas e 15 tétrades harmônicas para o Eikosany.") "" (om-make-point 657 287) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 484 109) (quote "((99/64 297/256 495/256 693/512) (77/64 231/128 385/256 693/512) (55/32 165/128 385/256 495/256) (33/32 165/128 231/128 297/256) (33/32 55/32 77/64 99/64) (63/32 189/128 315/256 693/512) (45/32 135/128 315/256 495/256) (27/16 135/128 189/128 297/256) (27/16 45/32 63/32 99/64) (35/32 105/64 315/256 385/256) (21/16 105/64 189/128 231/128) (21/16 35/32 63/32 77/64) (15/8 105/64 135/128 165/128) (15/8 35/32 45/32 55/32) (15/8 21/16 27/16 33/32))$") "" (om-make-point 674 55) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 443 112) (quote " ((15/8 21/16 35/32 105/64) (15/8 27/16 45/32 135/128) (21/16 27/16 63/32 189/128) (35/32 45/32 63/32 315/256) (105/64 135/128 189/128 315/256) (15/8 33/32 55/32 165/128) (21/16 33/32 77/64 231/128) (35/32 55/32 77/64 385/256) (105/64 165/128 231/128 385/256) (27/16 33/32 99/64 297/256) (45/32 55/32 99/64 495/256) (135/128 165/128 297/256 495/256) (63/32 77/64 99/64 693/512) (189/128 231/128 297/256 693/512) (315/256 385/256 495/256 693/512))") "" (om-make-point 206 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 28 54) (om-make-point 91 28) (list 1 3 5 7 9 11) "(1 3 5 7 9 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 234 48) (quote "Tétrades sub-harmônicas.") "" (om-make-point 298 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 10 285) (om-make-point 307 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7588 6971 6655 7357) (7588 7406 7090 6592) (6971 7406 7673 7175) (6655 7090 7673 6859) (7357 6592 7175 6859) (7588 6553 7438 6940) (6971 6553 6820 7522) (6655 7438 6820 7206) (7357 6940 7522 7206) (7406 6553 7255 6757) (7090 7438 7255 7642) (6592 6940 6757 7642) (7673 6820 7255 7024) (7175 7522 6757 7024) (6859 7206 7642 7024))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 757 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 46 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 173 61) (quote "Converte razões para midicents.") "" (om-make-point 98 218) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 328 286) (om-make-point 307 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7255 6757 7642 7024) (6820 7522 7206 7024) (7438 6940 7206 7642) (6553 6940 7522 6757) (6553 7438 6820 7255) (7673 7175 6859 7024) (7090 6592 6859 7642) (7406 6592 7175 6757) (7406 7090 7673 7255) (6655 7357 6859 7206) (6971 7357 7175 7522) (6971 6655 7673 6820) (7588 7357 6592 6940) (7588 6655 7090 7438) (7588 6971 7406 6553))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9) (9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 757 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6500))) (om-make-point 291 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 48) (quote "Tétrades Harmônicas.") "" (om-make-point 810 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 71 179) (om-make-point 44 28) 6500 "6500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (8 0 7 1 nil 2) (1 0 8 0 nil 2) (13 0 8 1 nil 2) (11 0 10 1 nil 1) (1 1 11 0 nil 1) (0 0 11 1 nil 1))) 6.18 nil "" (om-make-point 143 111) (om-make-point 1159 465)) (quote nil) (om-make-point 509 536) nil nil nil "eikosany tetrades"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (3 0 0 1 nil 0) (8 0 3 0 nil 0) (13 0 14 0 nil 0) (14 0 16 0 nil 0))) nil 6.18))