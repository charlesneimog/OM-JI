; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 10 10) (om-make-point 53 28) (om-make-point 615 356) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "PARTCH - diamond" (quote ((let ((box (om-load-boxcall (quote genfun) "DIAMOND 2" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "Limit-n for the diamond." "LIMITE" 11))) (om-make-point 128 98) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 205 49) (quote "Número do limite. Neste caso constroi-se o limite-5.") "" (om-make-point 128 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 230 89) (quote "Otonalidades. $Onde: $(1 3 5) é a primeira diagonal;$(1/3 1 5/3) é a terceira diagonal;$(1/5 3/5 1) é a segunda diagonal.$") "" (om-make-point 266 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 223 89) (quote "Utonalidades. $Onde: $(1 1/3 1/5) é a primeira diagonal;$(3 1 3/5) é a terceira diagonal;$(5 5/3 1) é a segunda diagonal.$") "" (om-make-point 32 224) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 204 60) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 252 60) (quote "Este objeto constroi a Tonalidade-Diamante segundo a teoria de Partch.") "" (om-make-point 254 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 256 187) (om-make-point 226 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 198 16) "((1 5 3) (1/5 1 3/5) (1/3 5/3 1))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 23 186) (om-make-point 222 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 194 16) "((1 1/5 1/3) (5 1 5/3) (3 3/5 1))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) nil 6.18))
