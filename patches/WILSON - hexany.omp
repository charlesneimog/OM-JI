; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 118 10) (om-make-point -8 0) (om-make-point 1627 841) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "WILSON - hexany" (quote ((let ((box (om-load-boxcall (quote genfun) "HEXANY" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 548 555) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY 4" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 37 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->RATIO 2" (quote cps->ratio) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HEXANY" 1))) (om-make-point 33 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY-CONNECTIONS 2" (quote hexany-connections) (quote ((om-load-inputfun (quote input-funbox) "list of two harmonics" "HARMONICO" (list 3 13)) (om-load-inputfun (quote input-funbox) "list of just four harmonics" "HEXANY" (list (list 3 5) (list 3 13) (list 5 13) (list 3 21) (list 5 21) (list 13 21))))) (om-make-point 729 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY 3" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 812 57) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 496 640) (om-make-point 512 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 484 26) "This is not a Hexany, The CPS Hexany needs 4 numbers: for example 3 7 13 17" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 84) (quote "Caso o usuário não conheça a teoria de Wilson e coloque mais de 4 harmônicos para o Hexany há a seguinte mensagem abaixo.") "" (om-make-point 643 543) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 535 517) (om-make-point 94 28) (list 5 7 13 17 19) "(5 7 13 17 19)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 221 62) (quote "O objeto transforma os vértices em razões.") "" (om-make-point 135 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 0 323) (om-make-point 284 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 256 21) "(35/32 65/64 91/64 85/64 119/64 221/128)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 0 182) (om-make-point 284 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 256 21) "((5 7) (5 13) (7 13) (5 17) (7 17) (13 17))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 62) (quote "O objeto constrói todas os vértices de um CPS-Hexany.") "" (om-make-point 119 84) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 49 45) (om-make-point 77 28) (list 5 7 13 17) "(5 7 13 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 363 53) (quote "Os vértices ((5 7) (5 13) (7 13) (5 17) (13 17)) estão conectados ao vértice (5 13).") "" (om-make-point 997 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 725 307) (om-make-point 269 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 241 17) "((5 7) (5 13) (7 13) (5 17) (13 17))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 65) (quote "O objeto mostra quais vértices estão conectados ao vértice selecionado no inlet 1.") "" (om-make-point 873 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 761 179) (om-make-point 51 28) (list 5 13) "(5 13)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 714 134) (om-make-point 284 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 256 21) "((5 7) (5 13) (7 13) (5 17) (7 17) (13 17))" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 62) (quote "O objeto constrói todos os vértices de um CPS-Hexany.") "" (om-make-point 881 73) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 827 22) (om-make-point 77 28) (list 5 7 13 17) "(5 7 13 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (12 0 1 0 nil 0) (10 0 2 0 nil 0) (16 0 3 0 nil 0) (17 0 3 1 nil 0) (19 0 4 0 nil 0) (0 0 5 0 nil 0) (2 0 9 0 nil 0) (1 0 10 0 nil 0) (3 0 14 0 nil 0) (4 0 17 0 nil 0))) nil 6.18))
