; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 1306 10) (om-make-point -8 -8) (om-make-point 1366 675) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "GERAL - modulation-notes" (quote ((let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 96 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 225 519) (om-make-point 28 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 179 513) (om-make-point 36 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND 2" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "First notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "Second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "Aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 4))) (om-make-point 97 562) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 168 144) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "SOBREPOSITION" 11) (om-load-inputfun (quote input-funbox) "High note" "RANGE" 2))) (om-make-point 126 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "List of notes (THIS OBJECT DON'T READ LISTS OF LIST.)" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of a tempered note." "APPROX" 10) (om-load-inputfun (quote input-funbox) "Tempered scale used to compare the note list." "TEMPERAMENT" 2))) (om-make-point 661 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 3" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "List of notes (THIS OBJECT DON'T READ LISTS OF LIST.)" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of a tempered note." "APPROX" 10) (om-load-inputfun (quote input-funbox) "Tempered scale used to compare the note list." "TEMPERAMENT" 2))) (om-make-point 252 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 109 49) (quote "Primeira estrutura de afinaÁ„o") "" (om-make-point 202 371) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 138 50) (quote "Segunda estrutura de afinaÁ„o") "" (om-make-point 376 342) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 50) (quote "Dist‚ncia em cents para serem consideradas iguais.") "" (om-make-point 521 281) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 63) (quote "Nota de referÍncia") "" (om-make-point 720 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 43) (quote "Primeira diagonal Otonal do Diamante.") "" (om-make-point 704 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 263 86) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 78) (quote "Passando notas em quartos de tom com 7 cents de aproximaÁ„o.") "" (om-make-point 883 272) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 518 37) (om-make-point 102 28) (list 11 19 97 1997) "(11 19 97 1997)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote om-ji::diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 517 64) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 304 134) (quote "Notas que aparecem na estrutura de MOS e na estrutura da Tonalidade-Diamante. Observe que h· um filtro para instrumentos ac˙sticos.$$A primeira nota (6552) se refere ao MOS e a segunda (7746) ‡ Tonalidade-Diamante.") "" (om-make-point 541 498) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 177 70) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 523 334) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote om-ji::rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 663 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote om-ji::rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 546 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES" (quote om-ji::modulation-notes) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 2))) (om-make-point 270 417) (om-make-point 272 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 669 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 737 229) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 708 229) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 326 208) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 293 208) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 671 48) (om-make-point 44 28) 6800 "6800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (7 0 3 0 nil 0) (6 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0) (18 0 5 0 nil 0) (13 0 5 1 nil 0) (4 0 5 2 nil 0) (23 0 6 0 nil 0) (25 0 6 1 nil 0) (24 0 6 2 nil 0) (0 0 7 0 nil 0) (27 0 7 1 nil 0) (26 0 7 2 nil 0) (15 0 16 0 nil 0) (21 0 20 0 nil 0) (28 0 20 1 nil 0) (16 1 21 0 nil 0) (7 0 22 0 nil 0) (6 0 22 1 nil 0) (19 0 22 2 nil 0) (20 0 23 0 nil 0))) nil 6.18))
