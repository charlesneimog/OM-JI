; OM File Header - Saved 2021/03/18 12:06:52
; (6.18 :patc (om-make-point 226 10) (om-make-point 418 40) (om-make-point 514 627) "" 183 0 nil "2021/03/18 12:06:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "GERAL-filter-acoustic-instrument" (quote ((let ((box (om-load-boxcall (quote abstraction) "Diamond" (om-load-patch-abs1 "Diamond" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 243 8133/28) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 1513/28 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 133 5445/28) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 85 6873/28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 50 4745/28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 135 2785/28) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (5 1 4 0 nil 0) (1 0 5 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 368 366)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 435/4 483/4) nil (list (list 6000.0 4734.6626 4982.404 4982.404 6239.1704 6123.7124 5391.648 4734.6626 5866.762 3662.961 5564.916 4982.404)) nil "Diamond"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "List of notes (THIS OBJECT DON'T READ LISTS OF LIST.)" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of a tempered note." "APPROX" 10) (om-load-inputfun (quote input-funbox) "Tempered scale used to compare the note list." "TEMPERAMENT" 2))) (om-make-point 224 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 101 296) (om-make-point 288 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 260 16) "(6000.0 5391.648)" :font (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Arithm-ser" (om-load-patch-abs1 "Arithm-ser" (quote ((let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "END" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" (quote t)))) (om-make-point 36 96) (om-make-point 150 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 104 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 160 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 97 9) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 49 9) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 104 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 134 191) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 1 0 nil 0) (0 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 335)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 2745/28 1359/28) nil (list (list 27 13 15 15 31 29 19 13 25 7 21 15)) nil "Arithm-ser"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 351 198) (quote "Este objeto 'filtra' uma lista de notas de modo a exibir somente notas que respeitam os critério do inlet 2 e 3. Sua utilidade e exibir notas de um contexto ultra-microtonal que podem ser usadas em instrumentos acústicos, visto que na maioria dos tratados de técnica extendida há sugestões de digitações para 1/2, 1/4 e 1/8 de tom. $$INLET 1: Lista de midicents.$$INLET 2: Aproximação em cents. $$INLET 3: 2 para semitom, 4 para 1/4 de tom, 8 para 1/8 de tom e assim sucessivamente. ") "" (om-make-point 50 363) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 285 165) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 244 159) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 160 15) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 127 15) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 15) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (6 0 1 1 nil 0) (5 0 1 2 nil 0) (1 0 2 0 nil 0) (9 0 3 0 nil 0) (8 0 3 1 nil 0) (7 0 3 2 nil 0))) nil 6.18))
