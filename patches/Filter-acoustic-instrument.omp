; OM File Header - Saved 2019/10/14 23:43:26
; (6.15 :patc (om-make-point 226 10) (om-make-point 50 50) (om-make-point 514 697) "" 183 0 "2019/10/14 23:43:26" "2019/10/14 23:43:26")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Partch")))(setf *om-current-persistent* (om-load-patch1 "Filter-acoustic-instrument" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 132 419) (om-make-point 288 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 260 16) "(6856 6392 6200 6200 6504 6856)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 36 209) (om-make-point 291 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 263 17) "(6936 6856 6392 7128 6120 6200 6312 6472 6200 6504 6584 6856)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Interval-sobreposition" (om-load-patch-abs1 "Interval-sobreposition" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 969/14 11297/28) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 509/4 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 174 869/4) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 129 869/4) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OCTAVE-REDUCE" (quote octave-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTE" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "nota mais aguda" "AGUDA" 7200) (om-load-inputfunmenu1 (quote input-funmenu) "list or list-of-lists" "MODE" 2 (list (list "list-of-lists" 1) (list "list" 2))))) (om-make-point 95 1077/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 50 445/4) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 97 445/4) (om-make-point 37 28) 7/4 "7/4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERVAL-SOBREPOSITION" (quote interval-sobreposition) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "FUND" 6000) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "list of sopreposition (I recomend the use o 'crible' object" "SIEVE" (list 2 3 7 11 12)))) (om-make-point 55 593/4) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (7 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (1 0 7 2 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 347/14 2659/21) nil (list (list 6936 6856 6392 7128 6120 6200 6312 6472 6200 6504 6584 6856)) nil "Interval-sobreposition"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Arithm-ser" (om-load-patch-abs1 "Arithm-ser" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 104 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 153 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 112 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 77 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "END" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" (quote t)))) (om-make-point 50 80) (om-make-point 150 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 89 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 104 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 134 191) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (4 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0))) 6.15 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 2745/28 1359/28) nil (list (list 27 17 19 21 15 25 9 29 25 3 13 17)) nil "Arithm-ser"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 351 198) (quote "Este objeto 'filtra' uma lista de notas de modo a exibir somente notas que respeitam os critério do inlet 2 e 3. Sua utilidade e exibir notas de um contexto ultra-microtonal que podem ser usadas em instrumentos acústicos, visto que na maioria dos tratados de técnica extendida há sugestões de digitações para 1/2, 1/4 e 1/8 de tom. $$INLET 1: Lista de midicents.$$INLET 2: Aproximação em cents. $$INLET 3: 2 para semitom, 4 para 1/4 de tom, 8 para 1/8 de tom e assim sucessivamente. ") nil (om-make-point 50 463) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 254 273) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 200 275) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-ACOUSTIC-INSTRUMENT" (quote filter-acoustic-instrument) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproximação de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 146 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 160 15) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 127 15) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 15) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (10 0 3 0 nil 0) (9 0 3 1 nil 0) (8 0 3 2 nil 0) (1 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0))) nil 6.15))