; OM File Header - Saved 2020/09/11 12:25:46
; (6.17 :patc (om-make-point 820 10) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 "2020/09/11 12:17:41" "2020/09/11 12:24:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "WILSON - Moment of Symmetry" (quote ((let ((box (om-load-boxcall (quote genfun) "MOS 3" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "High note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "Number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 75 149) (om-make-point 254 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 131 59) (quote "Este objeto somente sobrepõe os intervalos.") "" (om-make-point 328 156) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 294 122) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 212 118) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 134 113) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 58 115) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 96 40) (quote "Número de sobreposições.") "" (om-make-point 283 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 73 48) (quote "Nota mais aguda em midicents.") "" (om-make-point 204 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 78 47) (quote "Nota mais grave em midicents.") "" (om-make-point 121 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 78 47) (quote "Intervalo gerador") "" (om-make-point 43 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 500)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 57 254) (om-make-point 344 92) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6498) (6996) (6294) (6792) (6090) (6588) (7086) (6384) (6882) (6180) (6678) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 618 260) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 100 60) (quote "chord-seq$") "" (om-make-point 401 260) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS 2" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "High note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "Number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 547 138) (om-make-point 254 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 131 59) (quote "Este objeto somente sobrepõe os intervalos.") "" (om-make-point 800 145) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 766 111) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 684 107) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 606 102) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 530 104) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 96 40) (quote "Número de sobreposições.") "" (om-make-point 755 61) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 73 48) (quote "Nota mais aguda em midicents.") "" (om-make-point 676 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 78 47) (quote "Nota mais grave em midicents.") "" (om-make-point 593 56) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 78 47) (quote "Intervalo gerador") "" (om-make-point 515 56) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-VERIFY 2" (quote mos-verify) (quote ((om-load-inputfun (quote input-funbox) "list of notes - object-MOS" "NOTELIST" (list 6754 6308 7062 6616 6178)))) (om-make-point 642 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 588 303) (om-make-point 163 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 135 16) "(s s L s L s s L s L s L)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 177 61) (quote "Este objeto verifica se a sobreposição é um MOS ou não") "" (om-make-point 702 230) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 212 94) (quote "Se a sobreposição for um MOS o objeto dará sua configuração interna. \"s\" para Intervalo pequeno e \"L\" para intervalo grande.") "" (om-make-point 751 308) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "High note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "Number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 982 114) (om-make-point 162 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 993 78) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1033 80) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1083 79) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1130 79) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-VERIFY" (quote mos-verify) (quote ((om-load-inputfun (quote input-funbox) "list of notes - object-MOS" "NOTELIST" (list 6754 6308 7062 6616 6178)))) (om-make-point 1026 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 979 276) (om-make-point 152 43) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 124 19) "This is not a MOS" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 212 94) (quote "Se a sobreposição NÃO for um MOS o objeto 'printa' a seguinte mensagem \"This is not a MOS.\"") "" (om-make-point 1142 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (4 0 0 1 nil 0) (3 0 0 2 nil 0) (2 0 0 3 nil 0) (0 0 10 1 nil 0) (17 0 12 0 nil 0) (16 0 12 1 nil 0) (15 0 12 2 nil 0) (14 0 12 3 nil 0) (12 0 22 0 nil 0) (22 0 23 0 nil 0) (27 0 26 0 nil 0) (28 0 26 1 nil 0) (29 0 26 2 nil 0) (30 0 26 3 nil 0) (26 0 31 0 nil 0) (31 0 32 0 nil 0))) nil 6.17))
